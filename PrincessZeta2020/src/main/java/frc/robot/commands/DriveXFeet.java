// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.controller.PIDController;
import frc.robot.Robot;

/**
 *
 */
public class DriveXFeet extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_feet;
    private double m_maxSpeed;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    public PIDController pidController;
    private double feetPerTicks = 1/50;
    private double initialEncoderPosition;
    private double driveSpeed;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveXFeet(double feet, double maxSpeed) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_feet = feet;
        m_maxSpeed = maxSpeed;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
        pidController.setSetpoint(m_feet);
        pidController.enableContinuousInput(-180, 180);
        pidController.setTolerance(1);
    }

    public DriveXFeet(double feet){
        m_feet = feet;
        m_maxSpeed = .3;
        requires(Robot.driveTrain); 

        pidController.setSetpoint(m_feet);
        pidController.enableContinuousInput(-180, 180);
        pidController.setTolerance(1);
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        initialEncoderPosition = Robot.driveTrain.getFrontLeftEncoderPosition();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        double frontLeftEncoderPosition = Robot.driveTrain.getFrontLeftEncoderPosition();
        double feetMoved = feetPerTicks * (frontLeftEncoderPosition - initialEncoderPosition);
        driveSpeed = pidController.calculate(feetMoved, m_feet);
        Robot.driveTrain.drive(driveSpeed, driveSpeed);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return Robot.driveTrain.pidController.atSetpoint();
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.driveTrain.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        Robot.driveTrain.stop();
    }
}
